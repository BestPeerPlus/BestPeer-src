/*
 * @(#) LogManager.java 1.0 2006-9-14
 * 
 * Copyright 2006, National University of Singapore.
 * All rights reserved.
 */

package sg.edu.nus.logging;

import java.io.*;
import java.util.logging.FileHandler;
import java.util.logging.XMLFormatter;

import sg.edu.nus.peer.*;

/**
 * A simple manager to log <code>Exception</code> message. The default
 * <code>Formatter</code> is <code>XMLFormatter</code>. The DTD file used by
 * the default <code>Formatter</code> is generated by this class.
 * 
 * @author Xu Linhao
 * @version 1.0 2006-9-14
 */

public final class LogManager
{
	
	private static LogManager instance = null;
	private Logger logger = null;
	private FileHandler handler = null; 
	
	private LogManager(AbstractPeer peer)
	{
		logger  = Logger.getLogger("sg.edu.nus");
		try 
		{
			handler = new FileHandler(peer.getLogStore() + "log.%u.%g.xml");
			handler.setFormatter(new XMLFormatter());
			logger.addHandler(handler);
			logger.enableDebug();	// allow to log information
			genDTD(peer);				// create dtd
		} 
		catch (SecurityException e) 
		{
			/* ignore it */
		} 
		catch (IOException e) 
		{
			/* ignore it */
		}
	}
	
	/**
	 * Returns a logger.
	 * 
	 * @param peer the peer instance
	 * @return returns a logger
	 */
	public static Logger getLogger(AbstractPeer peer)
	{
		if (instance == null)
			instance = new LogManager(peer);
		return instance.logger;
	}
	
	// --------- generate dtd file ------------
	
	private final static String dtd = 
		"<!-- DTD used by the java.util.logging.XMLFormatter -->\r\n" +
		"<!-- This provides an XML formatted log message. -->\r\n\r\n" +
		"<!-- The document type is \"log\" which consists of a sequence of record elements -->\r\n" +
		"<!ELEMENT log (record*)>\r\n\r\n" +

		"<!-- Each logging call is described by a record element. -->\r\n" +
		"<!ELEMENT record (date, millis, sequence, logger?, level, class?, method?, thread?, message, key?, catalog?, param*, exception?)>\r\n\r\n" +

		"<!-- Date and time when LogRecord was created in ISO 8601 format -->\r\n" +
		"<!ELEMENT date (#PCDATA)>\r\n" +
		
		"<!-- Time when LogRecord was created in milliseconds since midnight January 1st, 1970, UTC. -->\r\n" +
		"<!ELEMENT millis (#PCDATA)>\r\n" + 
		
		"<!-- Unique sequence number within source VM. -->\r\n" +
		"<!ELEMENT sequence (#PCDATA)>\r\n" +
		
		"<!-- Name of source Logger object. -->\r\n" +
		"<!ELEMENT logger (#PCDATA)>\r\n\r\n" +
		
		"<!-- Logging level, may be either one of the constant names from java.util.logging.Constants (such as \"SEVERE\" or \"WARNING\") or an integer value such as \"20\". -->\r\n" +
		"<!ELEMENT level (#PCDATA)>\r\n\r\n" +
		
		"<!-- Fully qualified name of class that issued logging call, e.g. \"javax.marsupial.Wombat\". -->\r\n" +
		"<!ELEMENT class (#PCDATA)>\r\n\r\n" +
		
		"<!-- Name of method that issued logging call. It may be either an unqualified method name such as \"fred\" or it may include argument type information in parenthesis, for example \"fred(int,String)\". -->\r\n" +
		"<!ELEMENT method (#PCDATA)>\r\n\r\n" +
		
		"<!-- Integer thread ID. -->\r\n" +
		"<!ELEMENT thread (#PCDATA)>\r\n\r\n" +
		
		"<!-- The message element contains the text string of a log message. -->\r\n" +
		"<!ELEMENT message (#PCDATA)>\r\n\r\n" +
		
		"<!-- If the message string was localized, the key element provides the original localization message key. -->\r\n" +
		"<!ELEMENT key (#PCDATA)>\r\n\r\n" +
		
		"<!-- If the message string was localized, the catalog element provides the logger's localization resource bundle name. -->\r\n" +
		"<!ELEMENT catalog (#PCDATA)>\r\n\r\n" +
		
		"<!-- If the message string was localized, each of the param elements provides the String value (obtained using Object.toString()) of the corresponding LogRecord parameter. -->" +
		"<!ELEMENT param (#PCDATA)>\r\n\r\n" +
		
		"<!-- An exception consists of an optional message string followed by a series of StackFrames. Exception elements are used for Java exceptions and other java Throwables. -->\r\n" +
		"<!ELEMENT exception (message?, frame+)>\r\n\r\n" +
		
		"<!-- A frame describes one line in a Throwable backtrace. -->\r\n" +
		"<!ELEMENT frame (class, method, line?)>\r\n\r\n" +
		
		"<!-- an integer line number within a class's source file. -->" +
		"<!ELEMENT line (#PCDATA)>";

	private void genDTD(AbstractPeer peer) throws IOException
	{
		File file = new File(peer.getLogStore() + "logger.dtd");
		if (!file.exists())
		{
			BufferedWriter writer = new BufferedWriter(new FileWriter(file));
			writer.write(dtd);
			writer.close();
		}
	}
	
}